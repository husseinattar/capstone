
// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
const proof = require('../../zokrates/code/square/proof.json');

contract('TestSquareVerifier', accounts => {
    //Create Account
    const newAccount = accounts[0];
    
    //Get Proof Variables 
    const A = proof["proof"]["A"];
    const A_p = proof["proof"]["A_p"];
    const B = proof["proof"]["B"];
    const B_p = proof["proof"]["B_p"];
    const C = proof["proof"]["C"];
    const C_p = proof["proof"]["C_p"];
    const H = proof["proof"]["H"];
    const K = proof["proof"]["K"];

    const proofInput = proof["input"];
    const wrongProofInput = [11, 2];

    describe('Testing SquareVerifier', function () {
    beforeEach(async function () {
      this.contract = await SquareVerifier.new({from: newAccount});
    });

        it('Test verification with correct proof', async function () {
            let result = await this.contract.verifyTx.call(A, A_p, B, B_p, C, C_p, H, K, proofInput, {from: newAccount});
            assert.equal(result, false, "Correct proof Failed");
        });

        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async function () {
            let result = await this.contract.verifyTx.call(A, A_p, B, B_p, C, C_p, H, K, wrongProofInput, {from: newAccount});
            assert.equal(result, false, "Wrong proof passed");
        });
    });
});
